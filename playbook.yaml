---
- name: "Play to create hetzner cloud servers"
  hosts: all
  connection: local
  gather_facts: false

  tasks:
    - name: "Interact with hcloud to create cloud servers"
      ansible.builtin.include_tasks: "tasks/hetzner-cloud.yaml"

- name: "Play to configure servers"
  hosts: all
  tasks:
    - name: "Create low privileged user account"
      ansible.builtin.include_tasks: "tasks/create-worker-user.yaml"

    - name: "Remove labels from cloud server {{ inventory_hostname }}"
      hetzner.hcloud.hcloud_server:
        api_token: "{{ hcloud_api_token }}"

        name: "{{ inventory_hostname }}"
        labels: {}

        state: present
      when: new_server
      delegate_to: localhost

    - name: "Configure sshd"
      ansible.builtin.include_role:
        name: "ansible-role-sshd"

    - name: "Update repositories cache on systems using apt"
      ansible.builtin.apt:
        update_cache: true
      when: ansible_pkg_mgr == 'apt'
      changed_when: false
      become: true

    - name: "Install extra packages for enterprise linux"
      ansible.builtin.package:
        name: epel-release
        state: present
      when: "ansible_distribution in ['CentOS', 'AlmaLinux', 'Rocky']"
      become: true

    - name: "Setup fail2ban"
      ansible.builtin.include_role:
        name: "ansible-role-fail2ban"

    - name: "Configure automatic updates of installed packages"
      ansible.builtin.include_tasks: "tasks/auto-update.yaml"

    - name: "Setup nginx"
      ansible.builtin.include_role:
        name: "ansible-role-nginx"
      when:
        - enable_ipv4  # otherwise acme.sh cannot be installed
        - install_nginx

    # The passwords of postgresql users are not being stored with the 
    # other (e.g. database) settings in the host_vars/<hostname>/vars.yaml
    # for secure reasons. Instead the are stored in the vault of the host
    # (host_vars/<hostname>/vault and will be merged by the following task.
    - name: "Merge PostgreSQL users variables with passwords from vault"
      ansible.builtin.set_fact:
        postgresql_users: "{{ postgresql_users | default([]) + [item_u | combine(item_e)] }}"
      loop: "{{ postgresql_users_u | default([]) }}"
      loop_control:
        loop_var: item_u
      vars:
        item_e: "{{ postgresql_users_e | selectattr('name', '==', item_u.name) | first }}"
      when: install_postgresql

    - name: "Setup postgresql"
      ansible.builtin.include_role:
        name: "ansible-role-postgresql"
      when:
        - install_postgresql

    - name: "Setup redis"
      ansible.builtin.include_role:
        name: "ansible-role-redis"
      when:
        - install_redis
