---
- name: "Play to create hetzner cloud servers"
  hosts: all
  connection: local
  gather_facts: false
  strategy: free
  tasks:
    - name: "Interact with hcloud to create cloud servers"
      ansible.builtin.include_tasks:
        file: "tasks/hetzner-cloud.yaml"
        apply:
          tags: [always]
      tags: [always]  # this action needs to run every single time, to add the ip addresses of the servers to the inventory

- name: "Play to configure servers"
  hosts: all
  tasks:
    - name: "Create low privileged user account"
      ansible.builtin.include_tasks:
        file: "tasks/linux/create-worker-user.yaml"

    - name: "Remove labels from cloud server"
      when:
        - "new_server"
      hetzner.hcloud.server:
        api_token: "{{ hcloud_api_token }}"

        name: "{{ inventory_hostname }}"
        labels: {}

        state: present
      delegate_to: localhost

    - name: "Configure sshd"
      tags: [hardening]
      ansible.builtin.include_role:
        name: "ansible-role-sshd"
        apply:
          tags: [hardening]

    - name: "Update repositories cache on systems using apt"
      when:
        - "ansible_pkg_mgr == 'apt'"
      ansible.builtin.apt:
        update_cache: true
      changed_when: false
      become: true

    - name: "Ensure extra packages for enterprise linux are installed"
      when:
        - "ansible_distribution in ['CentOS', 'AlmaLinux', 'Rocky']"
      ansible.builtin.package:
        name: epel-release
        state: present
      become: true

    - name: "Setup fail2ban"
      tags: [hardening]
      ansible.builtin.include_tasks:
        file: "tasks/linux/setup-fail2ban.yaml"
        apply:
          tags: [hardening]

    - name: "Configure automatic updates of installed packages"
      tags: [hardening]
      ansible.builtin.include_tasks:
        file: "tasks/linux/setup-auto-update.yaml"
        apply:
          tags: [hardening]

    - name: "Setup clamav"
      tags: [hardening]
      ansible.builtin.include_tasks:
        file: "tasks/linux/setup-clamav.yaml"
        apply:
          tags: [hardening]

    # TODO Merge hetzner cloud and iptables firewall rules from felbinger.eu/ansible repository
    #      iptables is being installed on any host using fail2ban, so just ensure it's installed
    #      and use it. Outgoing firewall rules are more important than input rules, because they
    #      can be controlled by the port bindings / sockets.

    # TODO setup auditd (check / improve)

    ### FUTURE ###
    # TODO setup aide
    # TODO setup IDS (Suricata / snort)
    # TODO setup LSM (e.g. selinux, apparmor)
    # TODO setup agent / sidecar for wazuh / elastic / graylog / ... or sent at least logs via syslog but agent would be better
    # TODO think about backup
    ### END FUTURE ###

    # - name: "Audit the system using openscap"
    #   tags: [auditing]
    #   block:
    # Packages on debian: openscap-scanner ssg-debian
    # TODO openscap on each platform at least once (maybe even automaticly and download results when enabled)

    # TODO setup admin users (list, add keys from files using lookup and authorized_keys module)

    - name: "Setup postgresql"
      when:
        - "install_postgresql"
      tags: [postgresql]
      block:
        # Note: The passwords of postgresql users are not being stored with the
        #       other (e.g. database) settings in the host_vars/<hostname>/vars.yaml
        #       for security reasons. Instead the are stored in the vault of the host
        #       (host_vars/<hostname>/vault) and will be merged by the following task.
        - name: "Merge PostgreSQL users variables with passwords from vault"
          ansible.builtin.set_fact:
            postgresql_users: "{{ postgresql_users | default([]) + [item_u | combine(item_e)] }}"
          loop: "{{ postgresql_users_u | default([]) }}"
          loop_control:
            loop_var: item_u
          vars:
            item_e: "{{ postgresql_users_e | selectattr('name', '==', item_u.name) | first }}"

        - name: "Install postgresql using ansible-role"
          ansible.builtin.include_role:
            name: "geerlingguy.postgresql"
            apply:
              become: true
              tags: [postgresql]

    - name: "Setup redis"
      when:
        - "install_redis"
      tags: [redis]
      ansible.builtin.include_role:
        name: "geerlingguy.redis"
        apply:
          become: true
          tags: [redis]

    # TODO setup nginx with ModSecurity if install_nginx is true

    # TODO describe how to deploy containers with applications (make an example here)
