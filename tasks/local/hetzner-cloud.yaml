---
- name: "Gather list of hcloud servers"
  hetzner.hcloud.server_info:
  register: output

- name: "Map response of hcloud_server_info to list of server names"
  ansible.builtin.set_fact:
    existing_cloud_servers: "{{ output.hcloud_server_info | map(attribute='name') | list }}"

- name: "Determine cloud servers that are no longer defined in the ansible inventory"
  ansible.builtin.set_fact:
    discardable: "{{ existing_cloud_servers | difference(vars['groups']['all']) }}"

- name: "Prompt user for confirmation before server deletion"
  when:
    - "discardable | length > 0"
  ansible.builtin.pause:
    prompt: |
      Hetzner cloud contains servers that are no longer defined in your ansible inventory.
      Are you sure you want to delete {{ discardable | join(',') }}?
      This action cannot be undone. Please type 'yes' to confirm.
  register: confirmation

- name: "Remove cloud server which are no longer defined in the ansible inventory"
  when:
    - "discardable | length > 0"
    - "confirmation.user_input == 'yes'"
  hetzner.hcloud.server:
    name: "{{ item }}"
    state: absent
  loop: "{{ discardable }}"

- name: "Create cloud server"
  when:
    - "item not in existing_cloud_servers"
  hetzner.hcloud.server:
    name: "{{ item }}"
    server_type: "{{ vars['hostvars'][item]['server_type'] }}"
    location: "{{ vars['hostvars'][item]['location'] }}"
    image: "{{ vars['hostvars'][item]['image'] }}"
    ssh_keys: ["ansible"]
    enable_ipv4: "{{ vars['hostvars'][item]['enable_ipv4'] }}"
    enable_ipv6: "{{ vars['hostvars'][item]['enable_ipv6'] }}"
    labels: {"new": ""}

    state: present
  loop: "{{ vars['groups']['all'] }}"

- name: "Gather hcloud server infos"
  hetzner.hcloud.server_info:
  register: output

- name: "Adjust ansible inventory"
  when: server_info.ipv4_address is defined or server_info.ipv6 is defined
  ansible.builtin.add_host:
    name: "{{ item }}"
    ansible_host: "{{ (server_info.ipv6 | ansible.netcommon.ipmath(1)) | default(server_info.ipv4_address) }}"
    ansible_user: "{{ ('new' in server_info.labels) | ternary('root', worker_user) }}"
    ansible_sudo_pass: "{{ worker_password }}"
    groups: ["all"]
    new_server: "{{ 'new' in server_info.labels }}"
  vars:
    # First we need to extract the server information from the output,
    # this contains multiple entries, which we need to filter by the hostname 
    # (item), before we can access ipv6 and ipv6_address on it.
    server_info: "{{ output.hcloud_server_info | selectattr('name', 'equalto', item) | first }}"
  loop: "{{ vars['groups']['all'] }}"
  changed_when: false

- name: "Waiting for cloud server creation"
  when:
    # count amount of cloud servers that have a label "new"
    - "output.hcloud_server_info | map(attribute='labels') | selectattr('new', 'defined') | list | length > 0"
  ansible.builtin.pause:
    seconds: 30
